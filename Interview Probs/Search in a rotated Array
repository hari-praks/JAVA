//nums[]={3,4,5,1,2}
//target=2

class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        while(low<=high){
            int mid = (low + high)/2; //(0+4)/2=2-->(5)
            // Case 1: if target is found at first attempt
            if(target == nums[mid]){
                return mid;
            }
            
          //Case 2: to check right side is sorted or not
            
            if(nums[mid]<=nums[high]){  // 5<=2-->false
                if(target>nums[mid] && target <= nums[high]){ //if sorted does target present
                    low = mid + 1;
                }else{
                    high = mid - 1;
                }
            }else if(nums[low]<=nums[mid]){ // Case 3: to check left side is sorted or not  //3<=5--true
                if(target>=nums[low] && target<nums[mid]){  //2>=3 && 2<=5---false
                    high = mid-1;
                }else{                        // low->3 (1) [1,2] will be in loop again
                    low = mid+1;
                }
            }
        }
        return -1;
    }
}

//[1,2]-->array
//mid=(3+4)/2=3-->[1]
//1<=2--true{ 2>1 && 2<=2}--> true So l=mid+1; now l is pointing at 2 now 1st case will be executed
