/*
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
       int arr[]=new int[matrix.length*matrix[0].length];
        int a=0;
        for(int i=0;i<matrix.length;i++)
       {
         for(int j=0;j<matrix[i].length;j++)
           {
            arr[a++]=matrix[i][j];
           }
       }
        boolean flag=false;
         a=bsearch(0,arr.length-1,arr,target);
        if(a==target)
        {
            flag=true;
        }
        return flag;
        
    }
    public int bsearch(int low,int high,int arr[],int target)
    {
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(target>arr[mid])
            {
                return bsearch(mid+1,high,arr,target);
            }
            else if(target<arr[mid])
            {
                 return bsearch(low,mid-1,arr,target);
            }
            else
            {
                return arr[mid];
            }
            
        
        }
        return -1;
    }
}

/*

OPTIMAL SOLUTION
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        if (matrix.length == 0) 
            return false;
        
        int row = matrix.length, col = matrix[0].length;
        
        int low = 0, hi = col-1;
        
        while(low>=0 && low <row && hi>=0 && hi < col){
            int num = matrix[low][hi];
            if(num == target){
                return true;
            }
            if(num < target){
                low++;
            }
            else{
                hi--;
            }
        }
        return false;
    }
}
*/
